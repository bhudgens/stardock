# Global Defaults
# vim:syn=sh

export PORT=${PORT:-3001}
export PUBLISH_PORT=0

export STARDOCK_PULSE="10"
export STARDOCK_DRAINSTOP_WAIT="30"
export STARDOCK_BASE="stardock-base"

if [ -z "${STARDOCK_ROOT}" ]; then
  export STARDOCK_ROOT=$(dirname $(cd $(dirname ${BASH_SOURCE[0]}) && pwd))
fi
export STARDOCK_RUN="${STARDOCK_ROOT}/run"
export STARDOCK_BIN="${STARDOCK_ROOT}/bin"
export STARDOCK_TMP="${STARDOCK_ROOT}/tmp"
export STARDOCK_CACHE="${STARDOCK_ROOT}/cache"
export STARDOCK_OVERLAYS="${STARDOCK_ROOT}/overlays"

# An overlay intended to be installed in all containers
export STARDOCK_OVERLAY_CONTAINER="${STARDOCK_OVERLAYS}/containers"

# Things that are runtime files
export STARDOCK_LOGS="${STARDOCK_RUN}/logs"
export STARDOCK_CONFIG="${STARDOCK_RUN}/config"
export STARDOCK_KEY="${STARDOCK_RUN}/key"
export HEADQUARTERS_SOURCE="${STARDOCK_RUN}/.headquarters"
export HEADQUARTERS_LOCAL="${HEADQUARTERS_LOCAL:-${STARDOCK_RUN}/headquarters}"
export CURRENT_ORDERS="${STARDOCK_RUN}/current_orders"

export STARDOCK_NETWORK_NAME="stardock"
export STARDOCK_NETWORK_CIDR="10.0.0.0/16"
export STARDOCK_NETWORK_GW="10.0.0.1"

# We do it this way so we can detect if someone
# sets a different repository.  There would be
# no reason to push to remote repositories if
# they don't change to a remote and the default
# is still configured
export STARDOCK_REPOSITORY_DEFAULT="stardock"
export STARDOCK_REPOSITORY="${STARDOCK_REPOSITORY}"

# Support default set elsewhere
export HEADQUARTERS_ENV="${HEADQUARTERS_ENV:-${HEADQUARTERS_LOCAL}/.stardock}"

# NGINX Specific ENVS
export STARDOCK_OVERLAY_NGINX="${STARDOCK_OVERLAYS}/nginx"
export STARDOCK_NGINX_CONTAINER="stardock-nginx"
export STARDOCK_NGINX_RUNTIME="${STARDOCK_RUN}/nginx"
export STARDOCK_NGINX_CONF="${STARDOCK_NGINX_RUNTIME}/nginx.conf"
export STARDOCK_NGINX_BIN="${STARDOCK_ROOT}/nginx/nginx"
export STARDOCK_NGINX_DNS_CACHE_TIMEOUT=5

# Things in our cache
export STARDOCK_PRIVATE_KEY="${STARDOCK_KEY}/.private.key"
export NGINX_CONF="${STARDOCK_CACHE}/nginx"
export LOCAL_ENVIRONMENT="${LOCAL_ENVIRONMENT:-${STARDOCK_CACHE}/local_configs}"
export BUILDPACKS="${STARDOCK_CACHE}/buildpacks"

export SHIP_SCRIPTS="${HEADQUARTERS_LOCAL}/shipscripts"
# Local Users
export ADMIRAL="admiral"
export ADMIRAL_HOME="/home/admiral"
export CAPTAIN="captain"
export CAPTAIN_HOME="/home/captain"

# If this file exist the hupper will regen the nginx configs and hup nginx
export STARDOCK_NGINX_HUP_TURD="${STARDOCK_RUN}/stardock_hup_turd"

# If this file exist the hupper will 'restart' nginx when done instead of hup
export STARDOCK_RESTART_NGINX_HUP_TURD="${STARDOCK_RUN}/stardock_restart_hup_turd"
export MAX_OPEN_FILES="4096"
if [ "${TERM}" == "unknown" ]; then
  export TERM="xterm-256color"
fi

export SHIP=ship-$(ssh-keygen -lf /etc/ssh/ssh_host_rsa_key.pub | awk '{ print $2; }' | sed -e 's/://g')

export STARDOCK_APP_USER="ubuntu"

export USER_IDENTITY_HEADER="x-identity"
export USER_IDENTITY_COOKIE="stardock_user"
# XXX: Legacy Support
export USER_IDENTITY_COOKIE="starphleet_user"

export STARDOCK_AUTHENTIC_TOKEN="CHANGEME"

# Declare drives we'd setup and where
# they should mount for install on EC2
declare -A EC2_DRIVES
EC2_DRIVES["/dev/xvdb"]="/var/lib/docker"
EC2_DRIVES["/dev/xvdc"]="/var/log/biglogs"
EC2_DRIVES["/dev/xvdd"]="/var/lib/docker/volumes"
# Support AWS NVME drives
EC2_DRIVES["/dev/nvme1n1"]="/var/lib/docker"
EC2_DRIVES["/dev/nvme2n1"]="/var/log/biglogs"
EC2_DRIVES["/dev/nvme3n1"]="/var/lib/docker/volumes"

##########################################################
# CONTAINER STORAGE ON S3
##########################################################

unset SERVE_CONTAINERS
unset BUILD_CONTAINERS
unset S3_STORAGE_AWS_ACCESS_KEY_ID
unset S3_STORAGE_AWS_SECRET_ACCESS_KEY
unset S3_STORAGE_BUCKET_REGION
unset S3_STORAGE_BUCKET_PATH
export EXIT_CODE_FOR_FAILED_S3_DOWNLOADS=15

##########################################################
# SECURITY
##########################################################
# Security mode can be one of the following:
# htpasswd|ldap|public|jwt
export SECURITY_MODE="htpasswd"

# LDAP Needs
unset LDAP_SERVER

# JWT Needs
unset JWT_SECRET
unset JWT_AUTH_SITE
unset JWT_COOKIE_DOMAIN
unset JWT_ACCESS_FLAGS
unset JWT_COOKIE_NAME
unset JWT_REVOCATION_DIR
unset JWT_EXPIRATION_IN_SECONDS
unset JWT_MAX_TOKEN_AGE_IN_SECONDS

# HTPASSWD Needs
unset HTPASSWD
