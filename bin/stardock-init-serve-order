#!/usr/bin/env bash
# vim:syn=sh
### Usage:
###    stardock-init-serve-order <name> <order>
### --help
###
### This will stay persistent as long as the container stays running.  We'll
### run the full lifecycle of the container from here.
export DIR=$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)
source "$DIR/stardock-launcher"

die_on_error
run_as_root_or_die

##########################################################################
## Pre-Start - Setup and Build the Container
##########################################################################
function pre_start() {
  info "init-serve-order|building:${name}"

  # XXX: Do we need?
  # Used by latest_AUTHOR
  # ORDER_LOCAL="${HEADQUARTERS_LOCAL}/${order}/git"

  STATUS_FILE="${CURRENT_ORDERS}/${order}/.stardockstatus.${name}"

  run_orders "${HEADQUARTERS_LOCAL}/${order}/orders"

  if [ "${STOP_BEFORE_AUTODEPLOY}" == "1" ]; then
    info stopping before autodeploy
    "${DIR}/starphleet-reaper" "${name}" "${order}" --force
  fi

  # We ran the orders above and now we know if we are working
  # on a docker container or we need to try to build our own
  # so what we pull with docker will depend on that.
  [ -n "${SERVICE_DOCKER_TAG}" ] \
    && IMAGE_TO_PULL="${STARDOCK_REPOSITORY}:${SERVICE_DOCKER_TAG}" \
    || IMAGE_TO_PULL="${STARDOCK_REPOSITORY}/${order,,}:${name}"

  # This could create a race condition where we pull a new
  # image before we get started.  We will handle that below
  # by confirming the container name sent to us from upstream
  # still matches the sha we are about to launch
  docker_pull "${IMAGE_TO_PULL}" || true

  # Have we seen a healthy container for this orders?
  LAST_KNOWN_GOOD_CONTAINER=$(cat "${CURRENT_ORDERS}/${order}/.last_known_good_container" || true)

  # We are trying to determine if we should build this thing
  # or re-use what we have so we are gatheing intel first
  DO_WE_HAVE_THE_IMAGE=$(docker image ls -a --format '{{.Repository}}:{{.Tag}}' | egrep "${IMAGE_TO_PULL}" || true)


  ##########################################################
  # - We have the image and it was a dockerdeploy -
  # Stardock doesn't build these, we only fetch and
  # run them so we are just going to announce it
  ##########################################################
  if [ -n "${DO_WE_HAVE_THE_IMAGE}" ] \
  && [ -n "${SERVICE_DOCKER_TAG}" ]; then
    warn "init-serve-order|remote_docker_image:${IMAGE_TO_PULL}|name:${name}"

    # When deploying docker images we make the service sha
    # the docker image sha so we know if a newer docker
    # image is pulled and our container running is no
    # longer current.  That could have happened  while
    # we were getting setup so lets make sure we have
    # the correct sha in our container name
    DOCKER_IMAGE_SHA=$(get_docker_image_sha "${IMAGE_TO_PULL}")
    if ! echo "${name}" | egrep "\-${DOCKER_IMAGE_SHA}$"; then
      exit 1
    fi

  ##########################################################
  # - Already Have LKG -
  # If we already have the image and it was already flagged
  # on this server as good then we know we can run it
  ##########################################################
  elif [ "${name}" == "${LAST_KNOWN_GOOD_CONTAINER}" ] \
  &&   [ -n "${DO_WE_HAVE_THE_IMAGE}" ]; then
    warn "init-serve-order|existing_image:${name}"

  ##########################################################
  # - We have the image and we are storing in remote repo -
  # If we have a remote repository then this image
  # came from there and that would imply it has already
  # passed a healthcheck and been pushed by a build server
  ##########################################################
  elif [ -n "${DO_WE_HAVE_THE_IMAGE}" ] \
  &&   docker_remote_is_enabled; then
    warn "init-serve-order|remote_docker_image:${name}"

  ##########################################################
  # - Serve Only?
  # If we only serve containers and we haven't found one
  # yet then we should punt because something didn't work
  # out.
  # TODO: It could be that we need to do something here
  # to trigger a retry
  ##########################################################
  elif [ -n "${SERVE_ONLY_SHIP}" ]; then
    warn "init-serve-order|server_only_ship:${name}"
    exit 1

  ##########################################################
  # - Build the Container -
  # These are the legacy conditions.  If not of the other
  # items triggered above then we need to build a legacy
  # container.  These used to be built in LXC and are the
  # classic version of containers
  ##########################################################
  else
    warn "init-serve-order|new_container:${name}"
    # Statuses are used as state in various places
    echo 'building' > "${STATUS_FILE}"

    # We should destroy any existing images
    "${DIR}/stardock-docker-image-destroy" "${name}"
    IS_PUSH_NECESSARY="true"
    if ! "${DIR}/stardock-containerize" "${SERVICE_GIT_URL:--}" "${name}" "${HEADQUARTERS_LOCAL}/${order}"; then
      echo 'building failed' > "${STATUS_FILE}"
      # TODO: Work on Maillog in a non-upstart world
      # mail_log
      exit 1
    fi

  fi

}

##########################################################################
## Start - Start the above container
##########################################################################
function docker_run() {
  # If /dev/log exists on host OS we'll pass it through to
  # the container so "logger" will pass logs to host
  [ -e /dev/log ] && ENABLE_LOGGER=true

  ORDERS_FILE="${HEADQUARTERS_LOCAL}/${order}/orders"
  # We are not destroying the image we just made - only the container
  # so we can get a clean start with the image
  "${DIR}/stardock-docker-container-destroy" "${name}" || true
  # We need the bridge ip for localship, this will set
  # a variable "BRIDGE_IP"
  bridge_ip
  # XXX: Debug
  # Leave this in for a while because I imagine this
  # will need some tweaking as we find nefarious things
  # in orders files I wasn't expecting and nothing I do
  # works the first time
  echo '--------------- ENVIRONMENT ---------------'
  cat <( envsubst < "${ORDERS_FILE}" \
             | egrep -v '#.*' \
             | egrep export \
             | perl -pe 's|export ||' )
  echo '--------------- ----------- ---------------'
  # When it comes to docker containers we just run we
  # want to use the actual sha in case the tag moves
  # for the image on an updated pull
  IMAGE_TO_RUN=${DOCKER_IMAGE_SHA:-"${STARDOCK_REPOSITORY}/${order,,}:${name}"}
  # The envsubst evaluates their orders file and chomps out any
  # exports to pass them along to the container
  docker run \
    --rm \
    --network "${STARDOCK_NETWORK_NAME}" \
    --add-host="localship:${BRIDGE_IP}" \
    --name "${name}" \
    --env-file <( envsubst < "${ORDERS_FILE}" \
               | egrep -v '#.*' \
               | egrep export \
               | perl -pe 's|export ||' ) \
    -v "${STARDOCK_CACHE}/data":"/var/data" \
    ${ENABLE_LOGGER:+-v /dev/log:/dev/log} \
    "${IMAGE_TO_RUN}" & # sudo -E -H -u "${STARDOCK_APP_USER}" $@ &

  MY_DOCKER_CHILD=$!
}

function start() {
  info "init-serve-order|starting:${name}"
  docker_run
}

##########################################################################
## Post-Start - Start the above container
##########################################################################
function post_start() {
  info "init-serve-order|healthcheck:${name}"

  # Since we start the process in the background it can take a few
  # seconds to get going.  Give it a couple secs to start
  wait_for_docker_container "${name}"

  # Deploy all the things
  if [ "${UNPUBLISHED}" == "1" ]; then
    # starphleet-s3-put-container ${name}

    # It is important for the active container to still get set above
    # so that the reaper won't leave around stale containers.  We
    # now check if this is a build_only server and if yes we will
    # stop running the container and exit cleanly
    # if is_container_storage_on_s3 && [ -z "${SERVE_CONTAINERS}" ]; then
    #   info "Build Only Server - Stopping: ${name}"
    #   echo 'build server' > "${STATUS_FILE}"
    #   { stop ; exit 0; }
    # fi

    # At this point the container is active so make it the current container
    echo "${name}" > "${CURRENT_ORDERS}/${order}/.container"
    echo 'online' > "${STATUS_FILE}"
    # TODO:
    # Do we still want to use this?  maybe?  If yes, docker has
    # a built in expose we can use
    # stardock-expose "${name}" "${HEADQUARTERS_LOCAL}/${order}/orders"
    "${DIR}/stardock-reaper" "${name}" "${order}" --force

  else
    echo 'checking' > "${STATUS_FILE}"
    echo "${PORT}" > "${STATUS_FILE}.port"

    ######################
    # Healthchecks
    ######################
    # TODO: We have to deal with Healthchecks
    # Give the service a chance to light up
    if [ -n "${HEALTHCHECK}" ]; then
      # Allow for orders to configure the delay
      HEALTHCHECK_INIT_DELAY=${HEALTHCHECK_INIT_DELAY:-180}
      # Keep looping on the service until it responds with a success, or
      # eventually punt after some delay and give up
      info "Testing health of container ${name}"
      for ((c=0; c<=HEALTHCHECK_INIT_DELAY; c++)); do
        # If we get a successful healthcheck
        info "Attempt $c of ${HEALTHCHECK_INIT_DELAY}"
        if "${DIR}/stardock-healthcheck" "${name}" "${order}" "${HEALTHCHECK}" ; then
          break
        fi
        if [ "$c" -eq "${HEALTHCHECK_INIT_DELAY}" ]; then
          # At this point the service has failed to properly start
          warn Service failed to publish "${order}" for container ${name}
          echo 'failed' > "${STATUS_FILE}"
          # rm "${LAST_KNOWN_GOOD_CONTAINER}"
          # TODO: Cloud storage
          # if is_container_storage_on_s3; then
          #   if [ -n "${BUILD_CONTAINERS}" ] && [ -z "${SERVE_CONTAINERS}" ]; then
          #     mail_log
          #   fi
          # else
          # mail_log
          # fi
          exit 1
        fi
        sleep 1
      done
    fi

    # TODO: Worry about cloud storage
    # starphleet-s3-put-container ${name}

    # At this point the container is active so make it the current container
    echo "${name}" > "${CURRENT_ORDERS}/${order}/.container"

    # It is important for the active container to still get set above
    # so that the reaper won't leave around stale containers.  We
    # now check if this is a build_only server and if yes we will
    # stop running the container and exit cleanly
    # TODO: Moar cloud storage poo
    # if is_container_storage_on_s3 && [ -z "${SERVE_CONTAINERS}" ]; then
    #   info "Build Only Server - Stopping: ${name}"
    #   echo 'build server' > "${STATUS_FILE}"
    #   { stop ; exit 0; }
    # fi


    # Announce HUPS in case someone goes crazy
    echo "HUP_REQUESTED: ${order} ${name}" | logger

    # It's safe to push this to a remote repo
    if [ -n "${IS_PUSH_NECESSARY}" ]; then
      docker_push "${STARDOCK_REPOSITORY}/${order,,}:${name}"
      docker_push "${STARDOCK_REPOSITORY}/${order,,}:latest"
    fi

    # Connect this container to the Docker discovery name
    # BUG: We have to lower case the DNS name because NGINX
    #      looks for lowercase names and Docker has a known
    #      bug in libnetwork that is not compliance and makes
    #      it case sensitive:
    # https://github.com/moby/moby/issues/28689#issuecomment-262407822
    BUG_FIX_LOWER_CASE_NETWORK=$(echo ${order} | tr '[:upper:]' '[:lower:]')

    docker network disconnect "${STARDOCK_NETWORK_NAME}" "${name}"
    docker network connect \
      --alias "${BUG_FIX_LOWER_CASE_NETWORK}" \
      "${STARDOCK_NETWORK_NAME}" "${name}"

    # Trigger new publish configs and a hup of nginx
    "${DIR}/stardock-hup-nginx"

    # Update this containers status with 'online'
    echo 'online' > "${STATUS_FILE}"
    announce "init-serve-order|online:${name}"
  fi
}

# This runs everything the first time
pre_start
start
post_start

# This is the watch dog that runs in the background and keeps our
# docker container running full time
while [ 1 ]; do
  if [ -z "${MY_DOCKER_CHILD}" ] || [ ! -e "/proc/${MY_DOCKER_CHILD}" ]; then
    echo 'stopped' > "${STATUS_FILE}"
    pre_start
    start
    post_start
  fi
  sleep "${STARDOCK_PULSE}"
done &

exit 0
