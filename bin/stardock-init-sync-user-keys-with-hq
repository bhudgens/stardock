#!/usr/bin/env bash
### Usage:
###    stardock-init-sync-user-keys-with-hq
### --help
###
### Call this to synchronize headquarters public keys to the admiral
export DIR=$(cd $(dirname ${BASH_SOURCE[0]}) && pwd)
source "$DIR/stardock-launcher"

function update_sudo() {
# TODO: Should clean this up
cat > /etc/sudoers <<'EOF'
Defaults	env_reset
Defaults	mail_badpass
Defaults	secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
root	ALL=(ALL:ALL) ALL
%admin ALL=(ALL) ALL
%sudo	ALL=(ALL:ALL) NOPASSWD:ALL
%adm	ALL=(ALL:ALL) NOPASSWD:ALL
vagrant ALL=NOPASSWD: ALL
EOF
cat >> /etc/sudoers << EOF
captain ALL=(ALL) NOPASSWD: ${STARDOCK_BIN}/stardock-attach
captain ALL=(ALL) NOPASSWD: ${STARDOCK_BIN}/stardock-launcher
captain ALL=(ALL) NOPASSWD: ${STARDOCK_BIN}/stardock-redeploy
captain ALL=(ALL) NOPASSWD: ${STARDOCK_BIN}/stardock-retry-deploy
captain ALL=(ALL) NOPASSWD: ${STARDOCK_BIN}/stardock-start
captain ALL=(ALL) NOPASSWD: ${STARDOCK_BIN}/stardock-stop
captain ALL=(ALL) NOPASSWD: ${STARDOCK_BIN}/stardock-status
captain ALL=(ALL) NOPASSWD: ${STARDOCK_BIN}/stardock-serve-one-order
captain ALL=(ALL) NOPASSWD: /usr/bin/tail
captain ALL=(ALL) NOPASSWD: /usr/bin/lxc-ls
EOF
cat >> /etc/sudoers <<'EOF'
Defaults env_keep="SSH_AUTH_SOCK"
Defaults !requiretty
EOF
}

while [ 1 ]; do

  # Captain
  make_user "${CAPTAIN}" "${CAPTAIN_HOME}"
  adduser "${CAPTAIN}" adm

  # Admiral Only
  make_user "${ADMIRAL}" "${ADMIRAL_HOME}"
  adduser "${ADMIRAL}" sudo
  adduser "${ADMIRAL}" adm
  adduser "${ADMIRAL}" root

  update_sudo
  # grant The Admiral access
  # the auth keys are reset everytime
  # this means if any keys have been manually added to the account, they will be overwritten
  # When there are no authkeys in the HQ repo, no ssh access is left around
  ADMIRALSSH="${ADMIRAL_HOME}/.ssh"
  AUTHFILE="${ADMIRALSSH}/authorized_keys"
  test -f "${AUTHFILE}" && rm "${AUTHFILE}"

  # look for some auth keys in the HQ repo, when found add them all to the ssh auth keys to allow ssh access
  ADMIRALAUTHKEYS=${ADMIRALAUTHKEYS:-"${HEADQUARTERS_LOCAL}/authorized_keys"}
  # base touch on auth file to create
  touch ${AUTHFILE}
  #look for public keys pushed on the ship as well as in the headquarters

  if [ -d "${ADMIRALAUTHKEYS}" ]; then
    for f in $(find "${ADMIRALAUTHKEYS}" "${PUBLIC_KEYS}" | grep -v '\.git')
    do
      if ssh-keygen -l -f "${f}" > /dev/null; then
        #direct ssh as the admiral
        cat "${f}" >> ${AUTHFILE}
        echo '' >> ${AUTHFILE}
      fi
    done
  fi
  cat "${ADMIRALSSH}/id_rsa.pub" >> ${AUTHFILE}

  chmod 600 ${AUTHFILE}
  chown ${ADMIRAL}:${ADMIRAL} ${AUTHFILE}

  if ! cat "${ADMIRAL_HOME}/.bashrc" | grep -q stardock-enhance; then
    echo "${DIR}/stardock-enhance" >> "${ADMIRAL_HOME}/.bashrc"
  fi

  # Grant Captain access
  # The captain user has reduced access to the server intended for managing
  # apps. The auth keys are reset everytime
  # this means if any keys have been manually added to the account, they will be overwritten
  # When there are no authkeys in the HQ repo, no ssh access is left around
  CAPTAINSSH="${CAPTAIN_HOME}/.ssh"
  mkdir -p ${CAPTAINSSH}
  AUTHFILE="${CAPTAINSSH}/authorized_keys"
  test -f "${AUTHFILE}" && rm "${AUTHFILE}"

  # look for some auth keys in the HQ repo, when found add them all to the ssh auth keys to allow ssh access
  CAPTAINAUTHKEYS=${CAPTAINAUTHKEYS:-"${HEADQUARTERS_LOCAL}/authorized_keys"}
  # base touch on auth file to create
  touch ${AUTHFILE}
  #look for public keys pushed on the ship as well as in the headquarters
  if [ -d "${CAPTAINAUTHKEYS}" ]; then
    for f in $(find "${CAPTAINAUTHKEYS}" "${PUBLIC_KEYS}" | grep -v '\.git')
    do
      if ssh-keygen -l -f "${f}" > /dev/null; then
        #direct ssh as the admiral
        cat "${f}" >> ${AUTHFILE}
        echo '' >> ${AUTHFILE}
      fi
    done
  fi
  cat "${CAPTAINSSH}/id_rsa.pub" >> ${AUTHFILE}

  chmod 600 ${AUTHFILE}
  chown ${CAPTAIN}:${CAPTAIN} ${AUTHFILE}

  if ! cat "${CAPTAIN_HOME}/.bashrc" | grep -q stardock-enhance; then
    echo "${DIR}/stardock-enhance" >> "${CAPTAIN_HOME}/.bashrc"
  fi

  sleep ${STARDOCK_PULSE}
done
